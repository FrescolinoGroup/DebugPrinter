<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classDebugPrinter_1_1DebugPrinter" kind="class" prot="public">
    <compoundname>DebugPrinter::DebugPrinter</compoundname>
    <includes refid="DebugPrinter_8hpp" local="no">DebugPrinter.hpp</includes>
    <innerclass refid="structDebugPrinter_1_1DebugPrinter_1_1has__stream" prot="private">DebugPrinter::DebugPrinter::has_stream</innerclass>
    <innerclass refid="structDebugPrinter_1_1DebugPrinter_1_1has__stream__impl" prot="private">DebugPrinter::DebugPrinter::has_stream_impl</innerclass>
    <innerclass refid="structDebugPrinter_1_1DebugPrinter_1_1m__and" prot="private">DebugPrinter::DebugPrinter::m_and</innerclass>
    <innerclass refid="structDebugPrinter_1_1DebugPrinter_1_1m__and__impl" prot="private">DebugPrinter::DebugPrinter::m_and_impl</innerclass>
    <innerclass refid="structDebugPrinter_1_1DebugPrinter_1_1m__and__impl_3_01B_00_01T_00_01U_8_8_8_4" prot="private">DebugPrinter::DebugPrinter::m_and_impl&lt; B, T, U...&gt;</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classDebugPrinter_1_1DebugPrinter_1a8c10746fa6df704240007e3190c6ad34" prot="private" static="no" mutable="no">
        <type>std::ostream *</type>
        <definition>std::ostream* DebugPrinter::DebugPrinter::outstream</definition>
        <argsstring></argsstring>
        <name>outstream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="317" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classDebugPrinter_1_1DebugPrinter_1a8d79e27d4196ee873c70518fd8295430" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int DebugPrinter::DebugPrinter::_prec</definition>
        <argsstring></argsstring>
        <name>_prec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="318" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classDebugPrinter_1_1DebugPrinter_1a48e53ea985b5421157b683cea5593a0a" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string DebugPrinter::DebugPrinter::hcol</definition>
        <argsstring></argsstring>
        <name>hcol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="319" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classDebugPrinter_1_1DebugPrinter_1a7cc8485da343d4d37ebe2fc0c24716ab" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string DebugPrinter::DebugPrinter::hcol_r</definition>
        <argsstring></argsstring>
        <name>hcol_r</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="320" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="320" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classDebugPrinter_1_1DebugPrinter_1a6e500dfed26961b90fcf60b5de7e176a" prot="private" static="yes" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int DebugPrinter::DebugPrinter::max_backtrace</definition>
        <argsstring></argsstring>
        <name>max_backtrace</name>
        <initializer>= 50</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="322" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classDebugPrinter_1_1DebugPrinter_1a074b18ae19d725d1d397abc029a69ede" prot="private" static="yes" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int DebugPrinter::DebugPrinter::max_demangled</definition>
        <argsstring></argsstring>
        <name>max_demangled</name>
        <initializer>= 4096</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="323" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="323" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1a019ee8cb90e41050609edce2850a6c29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>DebugPrinter::DebugPrinter::DebugPrinter</definition>
        <argsstring>()</argsstring>
        <name>DebugPrinter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="163" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1a6b01002e7ab758be967a0aa8a1a36e22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void DebugPrinter::DebugPrinter::operator=</definition>
        <argsstring>(std::ostream &amp;os)</argsstring>
        <name>operator=</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Assignment operator for changing streams. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream to use</para></parameterdescription>
</parameteritem>
</parameterlist>
Default == <computeroutput>std::cout</computeroutput>. Change to any <computeroutput>std::ostream</computeroutput> with: <verbatim>dout = std::cerr;</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="174" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1adc6146083f3efae9b18fdd70c6de3d6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void DebugPrinter::DebugPrinter::set_precision</definition>
        <argsstring>(int prec)</argsstring>
        <name>set_precision</name>
        <param>
          <type>int</type>
          <declname>prec</declname>
        </param>
        <briefdescription>
<para>Number of displayed decimal digits. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prec</parametername>
</parameternamelist>
<parameterdescription>
<para>desired precision</para></parameterdescription>
</parameteritem>
</parameterlist>
Default == 5. Example usage: <verbatim>dout.set_precision(12);</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="175" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1aae1612f74ea64d676a4370781f562ca8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void DebugPrinter::DebugPrinter::set_color</definition>
        <argsstring>(std::string str)</argsstring>
        <name>set_color</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Highlighting color. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>color code</para></parameterdescription>
</parameteritem>
</parameterlist>
Assumes a <computeroutput>bash</computeroutput> compatible terminal and sets the <computeroutput>operator()</computeroutput> highlighting color, for example cyan ( == &quot;36&quot; == default): <verbatim>dout.set_color(&quot;36&quot;);</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="176" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="176" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1af0a7b54783dbdbd3e9b7abe647327e86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void DebugPrinter::DebugPrinter::set_color</definition>
        <argsstring>()</argsstring>
        <name>set_color</name>
        <briefdescription>
<para>Remvoe highlighting color. </para>        </briefdescription>
        <detaileddescription>
<para>No color highlighting (e.g. when writing to a file) Usage example: <verbatim>dout.set_color();
</verbatim></para><para>For bash color codes check <ulink url="http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html">http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html</ulink> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="182" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1a17cd338fe9aad8265b384d915e533cb4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DebugPrinter::DebugPrinter::operator()</definition>
        <argsstring>(const T &amp;label, const U &amp;obj, const std::string sc=&quot;: &quot;) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const T &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>sc</declname>
          <defval>&quot;: &quot;</defval>
        </param>
        <briefdescription>
<para>Prints highlighted label and object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>should have a std::ostream &amp; operator&lt;&lt; overload </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>should have a std::ostream &amp; operator&lt;&lt; overload </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sc</parametername>
</parameternamelist>
<parameterdescription>
<para>delimiter between label and object</para></parameterdescription>
</parameteritem>
</parameterlist>
Example usage: <verbatim>dout(label, object);  </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="199" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1af19e733886f46cd89f7970c7159be7c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DebugPrinter::DebugPrinter::operator()</definition>
        <argsstring>(const T &amp;obj) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const T &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Prints highlighted object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>should have a std::ostream &amp; operator&lt;&lt; overload</para></parameterdescription>
</parameteritem>
</parameterlist>
Equivalent to <verbatim>dout(&quot;&gt;&gt;&gt; &quot;, obj, &quot;&quot;);
</verbatim></para><para>Example usage: <verbatim>dout(label);  </verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="215" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="215" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1ae001e5dafe40704db15d719f450c7226" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DebugPrinter::DebugPrinter::type</definition>
        <argsstring>(T obj) const </argsstring>
        <name>type</name>
        <param>
          <type>T</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Prints the RTTI for given object. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classDebugPrinter_1_1DebugPrinter" kindref="compound">DebugPrinter</ref> member function documentation</para><para>Example usage: <verbatim>dout.type(object)</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="222" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1a9b41d1bf3e6c5caa897b5d8cdf100358" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void DebugPrinter::DebugPrinter::stack</definition>
        <argsstring>(const int backtrace_size=max_backtrace, const bool compact=false, const int begin=1) const </argsstring>
        <name>stack</name>
        <param>
          <type>const int</type>
          <declname>backtrace_size</declname>
          <defval>max_backtrace</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>compact</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const int</type>
          <declname>begin</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Prints a stack trace. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>backtrace_size</parametername>
</parameternamelist>
<parameterdescription>
<para>print at most this many frames </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compact</parametername>
</parameternamelist>
<parameterdescription>
<para>only print function names </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>starting offset</para></parameterdescription>
</parameteritem>
</parameterlist>
Example usage: <verbatim>dout.stack();                // print a full stack trace
dout.stack(count);           // print at most (int)count frames
dout.stack(count, true);     // print in compact format
dout_FUNC                    // shortcut for  dout.stack(1, true);</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="229" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="229" bodyend="292"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classDebugPrinter_1_1DebugPrinter_1aeaf2418ff705b6cdce46c44e4d38b820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend <ref refid="classDebugPrinter_1_1DebugPrinter" kindref="compound">DebugPrinter</ref> &amp;</type>
        <definition>DebugPrinter&amp; operator&lt;&lt;</definition>
        <argsstring>(DebugPrinter &amp;d, const T &amp;output)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classDebugPrinter_1_1DebugPrinter" kindref="compound">DebugPrinter</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>operator&lt;&lt; overload for std::ostream </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="166" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="415" bodyend="425"/>
      </memberdef>
      <memberdef kind="friend" id="classDebugPrinter_1_1DebugPrinter_1a5370804f8c7f3e318a0c16be6320cb62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classDebugPrinter_1_1DebugPrinter" kindref="compound">DebugPrinter</ref> &amp;</type>
        <definition>DebugPrinter&amp; operator&lt;&lt;</definition>
        <argsstring>(DebugPrinter &amp;d, std::ostream &amp;(*pf)(std::ostream &amp;))</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classDebugPrinter_1_1DebugPrinter" kindref="compound">DebugPrinter</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::ostream &amp;(*)(std::ostream &amp;)</type>
          <declname>pf</declname>
        </param>
        <briefdescription>
<para>operator&lt;&lt; overload for std::ostream manipulators </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="167" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="428" bodyend="433"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1a0e7699dcef67ae5c9b680c306483fede" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string DebugPrinter::DebugPrinter::demangle</definition>
        <argsstring>(const std::string &amp;str, int &amp;status) const </argsstring>
        <name>demangle</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="328" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="328" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1af36593ac78694f40cb36fce70768f26c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string DebugPrinter::DebugPrinter::prog_part</definition>
        <argsstring>(const std::string str) const </argsstring>
        <name>prog_part</name>
        <param>
          <type>const std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="344" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="344" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1a897e97a986e6b4a2e8de0369b1796c81" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string DebugPrinter::DebugPrinter::mangled_part</definition>
        <argsstring>(const std::string str) const </argsstring>
        <name>mangled_part</name>
        <param>
          <type>const std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="347" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="347" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1aa3e075a820528b259d2f81a5bbb9250f" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string DebugPrinter::DebugPrinter::offset_part</definition>
        <argsstring>(const std::string str) const </argsstring>
        <name>offset_part</name>
        <param>
          <type>const std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="351" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1a891acc572eb636e01d47a8641a3ce236" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool DebugPrinter::DebugPrinter::is_number</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>is_number</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="355" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="355" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1a18c4e164ca8ba706044b4f111d721205" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!B, void &gt;::<ref refid="classDebugPrinter_1_1DebugPrinter_1ae001e5dafe40704db15d719f450c7226" kindref="member">type</ref></type>
        <definition>std::enable_if&lt;!B, void&gt;::type DebugPrinter::DebugPrinter::print_stream_impl</definition>
        <argsstring>(const U &amp;, const V &amp;obj, const std::string &amp;) const </argsstring>
        <name>print_stream_impl</name>
        <param>
          <type>const U &amp;</type>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="364" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="364" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classDebugPrinter_1_1DebugPrinter_1ac69c59b0b774fbc09d19bfe3d3dec6ad" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; B, void &gt;::<ref refid="classDebugPrinter_1_1DebugPrinter_1ae001e5dafe40704db15d719f450c7226" kindref="member">type</ref></type>
        <definition>std::enable_if&lt;B, void&gt;::type DebugPrinter::DebugPrinter::print_stream_impl</definition>
        <argsstring>(const U &amp;label, const V &amp;obj, const std::string &amp;sc) const </argsstring>
        <name>print_stream_impl</name>
        <param>
          <type>const U &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="373" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="373" bodyend="376"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for global static <computeroutput>dout</computeroutput> object. </para>    </briefdescription>
    <detaileddescription>
<para><heading level="4">Usage:</heading>
</para><para>For details and more examples, see the <ref refid="classDebugPrinter_1_1DebugPrinter" kindref="compound">DebugPrinter</ref> member function documentation. <verbatim>using namespace DebugPrinter;

dout &lt;&lt; &quot;foo&quot; &lt;&lt; std::endl;
dout, var , 5, &quot; bar &quot;, 6 &lt;&lt; &quot; foobar &quot; &lt;&lt; 7, 8;

dout(object);                // highlights the object
dout_HERE                    // shortcut for  dout(__func__, __LINE__);
dout_stack(2);               // print top two stack frames
dout_FUNC                    // print current function signature
dout.type(object)            // RTTI for given object

dout = std::cout             // set output stream
dout.set_precision(13)       // set decimal display precision
dout.set_color(&quot;31&quot;)        // set terminal highlighting color</verbatim> </para>    </detaileddescription>
    <location file="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" line="155" column="1" bodyfile="/home/bryonak/c/frescolino/fsc/DebugPrinter/DebugPrinter.hpp" bodystart="155" bodyend="407"/>
    <listofallmembers>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a8d79e27d4196ee873c70518fd8295430" prot="private" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>_prec</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a019ee8cb90e41050609edce2850a6c29" prot="public" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>DebugPrinter</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a0e7699dcef67ae5c9b680c306483fede" prot="private" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>demangle</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a48e53ea985b5421157b683cea5593a0a" prot="private" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>hcol</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a7cc8485da343d4d37ebe2fc0c24716ab" prot="private" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>hcol_r</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a891acc572eb636e01d47a8641a3ce236" prot="private" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>is_number</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a897e97a986e6b4a2e8de0369b1796c81" prot="private" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>mangled_part</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a6e500dfed26961b90fcf60b5de7e176a" prot="private" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>max_backtrace</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a074b18ae19d725d1d397abc029a69ede" prot="private" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>max_demangled</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1aa3e075a820528b259d2f81a5bbb9250f" prot="private" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>offset_part</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a17cd338fe9aad8265b384d915e533cb4" prot="public" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>operator()</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1af19e733886f46cd89f7970c7159be7c1" prot="public" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>operator()</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1aeaf2418ff705b6cdce46c44e4d38b820" prot="public" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a5370804f8c7f3e318a0c16be6320cb62" prot="public" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a6b01002e7ab758be967a0aa8a1a36e22" prot="public" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>operator=</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a8c10746fa6df704240007e3190c6ad34" prot="private" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>outstream</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a18c4e164ca8ba706044b4f111d721205" prot="private" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>print_stream_impl</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1ac69c59b0b774fbc09d19bfe3d3dec6ad" prot="private" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>print_stream_impl</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1af36593ac78694f40cb36fce70768f26c" prot="private" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>prog_part</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1aae1612f74ea64d676a4370781f562ca8" prot="public" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>set_color</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1af0a7b54783dbdbd3e9b7abe647327e86" prot="public" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>set_color</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1adc6146083f3efae9b18fdd70c6de3d6b" prot="public" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>set_precision</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1a9b41d1bf3e6c5caa897b5d8cdf100358" prot="public" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>stack</name></member>
      <member refid="classDebugPrinter_1_1DebugPrinter_1ae001e5dafe40704db15d719f450c7226" prot="public" virt="non-virtual"><scope>DebugPrinter::DebugPrinter</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
